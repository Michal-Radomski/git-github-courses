git config --global --list
git config --global --edit (includes aliases)
git config --global --get diff.tool

git config --global core.editor "nano"

git difftool <hash commit older> <hash commit newer>

git diff --cached
git status -s

git init
git add README.md
git commit -m "First commit"
git remote add origin <url>
git push -u origin master (-u -> --set-upstream)
git remote -v

git remote set-url origin <url with user + password>

git branch --set-upstream-to=origin/master (git branch -u origin/master)

git log
git log --stat
git log --patch
git log --graph
git log --after=06/0/2025
git log --since=06/0/2025
git log --oneline
git log --oneline --decorate -n 1

git commit --amend

git diff --name-only HEAD HEAD~1
git show --name-only
git show --name-status

git reflog
git reflog HEAD@{2.days.ago}

git diff HEAD@{5} HEAD@{4}
git difftool HEAD@{5} HEAD@{4}

git diff HEAD@{1.min.ago} HEAD@{2.days.ago}
git difftool HEAD@{1.min.ago} HEAD@{2.days.ago}

git reflog expire --expire-unreachable=now --all -> This prunes all reflog entries that are not reachable from any current
git prune
git gc --prune=now -> This is used for garbage collection in a Git repository

git fetch origin --prune
git config --global fetch.prune true

git fetch (new branch from remote repo to local repo)
git push origin <branch name>
git pull

git merge <branch name> (merges to the current branch)

git merge --continue (after conflicts)
git merge --abort

git reset HEAD
git reset <file name>
git reset <commit hash>

git reset head --hard

git clean -d -x -f -i
git reset <commit hash> --hard

git reset <commit hash> (mixed reset)
git reset --mixed <commit hash> (mixed reset)
git reset --soft <commit hash> (soft reset)
git reset --hard <commit hash>

git revert <commit hash>
git revert --abort

git grep <STRING>

git rebase <branch name> (rebases current branch to the 'branch name')
git rebase -i HEAD~2 (squashing 2 commits into one commit)

git cherry-pick <commit hash 1> <commit hash 2> <commit hash 3>

git branch -d <branch-name> (if fully merged)
git branch -D <branch-name> (forces to delete)

git branch
git branch <branch name> 

git branch --all
git switch <branch name>

git checkout -b <brach name>

git checkout <commit hash>
checkout master (back)

git stash save <stash name> (only local!)
git stash list
git stash apply <stash name>
git stash pop <stash number>
git stash show stash@{0}
git stash apply stash@{0}
git stash drop stash@{1}
git stash clear

git submodule add <submodule repo url>

git clone <repo url> (cloning the main repo)
git submodule init
git submodule update
git clone --recurse-submodules <main repo url> (= three last commands)

git tag -l (also git tag -> list of tags)
git tag <light tag name>
git show <tag name>
git tag -l "first*" (pattern)

git tag -a <annotated tag name>
git push origin --tags
git config --global push.followTags true

git lfs track "*.psd"
